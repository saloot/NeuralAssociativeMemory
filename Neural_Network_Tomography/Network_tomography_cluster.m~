
%===========================INITIALIZATION=================================
B_LLR_thr = 0;                  % the threshold usedin updating belief LLRs

theta = 0.05;                   % update threshold  
p = 0.3;                        % connection probability
network_size = 200;             % number of neurons
tau = 500000;                   % This is the rate according to which membrane potential drops

q = .65*(1-1/tau)*theta/p;      % stimulus firing probability    

no_averaging_itrs = 30;         % number of times we perform each simulation for the sake of averging

    
parameter_range = [700:500:5100];

%------------------------Initialize the SSH Connection---------------------
channel = sshfrommatlab('amir','lth.epfl.ch','arashmidos'); 
%--------------------------------------------------------------------------

%==========================================================================



%======================LOOP OVER THE PARAMETERS============================
for itr = 1:length(parameter_range)
    no_samples = parameter_range(itr);       % number of sample recordings
    
    %--------------------Submit the Job to the Cluster---------------------
    simple_Hebb_rule_leaky(n,T,tau,theta,p,q,no_averaging_itrs,B_LLR_thr)
    command = ['cd /scratch/amir/Network_Tomography/Submit_Cluster;qsub -N "Net_tomo_',num2str(itr),...
        '" -v n=',num2str(network_size),',T=',num2str(no_samples),',tau=',num2str(tau),',theta=',num2str(theta),...                                        
        ',p=',num2str(p),',q=',num2str(q),',theta0=',num2str(theta0),',db_name_in=''"''"''',db_name_in,'''"''"'',db_file_in=''"''"''',db_file_in,...
                                        '''"''"'',learn_itr_max=',num2str(learn_itr_max),',simulation_set=',num2str(simulation_set),',shift_horiz=',num2str(shift_horiz),',Q=',num2str(Q),' clustered_neural_learn_v2.pbs'];        
                                    [channel, result]  =  sshfrommatlabissue(channel,command);             
                                    %------------------------------------------------------
                                
    
                                    %----------Check the success of the submission---------
                                    if (isequal(result, {''})) 
                                        display('Unsubmitted learning job!');
                                    else
                                        display('Learning job submitted successfully!');
                                        ttemp = result{1};
                                        job_id = str2num(ttemp(1:6));
                                        fid = fopen([destination_folder,'/job_being_process_cluster_size_',num2str(n),'_consts_',num2str(const_learn),'_alpha_',num2str(alpha0),'_beta_',num2str(beta0),'_theta_',...
                                                num2str(theta0),'_clustere_',num2str(cluster),'_Q_',num2str(Q),'_itr_',num2str(learn_itr_max),'.txt'],'w');
                                        fprintf(fid, '%d %d', [0 job_id]);
                                        fclose(fid);
                                        unlearned_jobs = unlearned_jobs + 1;
                                    
                                    end 
end
%==========================================================================
    
% %==============================PLOT RESULTS================================
% figure
% plot(parameter_range,success_measure(1,:),'g-*')
% hold on
% plot(parameter_range,success_measure(2,:),'k-o')
% plot(parameter_range,acc_theory,'r')
% plot(parameter_range,err_theory,'k')
% title(['q=',num2str(q),' p=',num2str(p),' theta=',num2str(theta),' n=',num2str(n)])
% legend('No. correct edges','No. false edges')
% xlabel('T')
% %==========================================================================