%==========================================================================
%******************FUNCTION: read_journal_results**************************
%==========================================================================

%--------------------------------INPUTS------------------------------------
% N_in: The number of pattern nodes in the graph
% K_in: The dimension of the subspace of the pattern nodes
% L_in: The number of clusters if we have multiple levels (L = 1 for single level)
% alpha0: The step size in the learning algorithm
% beta0: The sparsity penalty coefficient in the learning algorithm
% theta0: The sparsity threshold in the learning algorithm
% gamma_BFO: The update threshold in the original bit-flipping recall algorithm 
% gamma_BFS: The update threshold in the simplified (yet better) bit-flipping recall algorithm 
%--------------------------------------------------------------------------

%--------------------------------OUTPUTS-----------------------------------
% processed_error_bits: The list of processed number of initial erroneous nodes
% processed_PER_WTA: The list of processed Pattern Error Rates for the Winner-Take-All algorithm
% processed_PER_BFO: The list of processed Pattern Error Rates for the original bit-flipping algorithm
% processed_PER_BFS: The list of processed Pattern Error Rates for the simplified bit-flipping algorithm
%--------------------------------------------------------------------------


%--------------------------FUNCTION DESCRIPTION----------------------------
% This function gets the specification of a clustered neural associative
% memory and reads the result of recall phase from the appropriate files. 
% The results will then be plotted and compared with theoretical values. 
%--------------------------------------------------------------------------

%==========================================================================
%==========================================================================

%%
%=============================INITIALIZATION===============================

%-------------------------Simulation Variables-----------------------------
if (~exist('initialization_done_by_main','var'))    % If already not initialized by the GUI..
    K = 150;                            % Number of message bits
    N = 300;                            % Number of pattern neurons in the network
    Q = 8;                              % Number of quantization levels
    const_to_learn = 150;               % Number of contraints to learn over the patterns
    random_dataset_flag = 1;            % If 1, this flag tells the code to use the dataset generated by the file "neural_initialization.m". If 0, it will read the dataset from the file specified by the user
    index_in = 1;                       % Index of the random graph in the considered ensemble (for random_dataset_flag =1)    
    err_bits_range = [0:10];            % The number of bits that will be corrupted initially for the recall phase
    gamma_BFO = 0.95;                   % The update threshold for the Original Bit flipping algorithm
    gamma_BFS = 0.95;                   % The update threshold for the Simplified Bit flipping algorithm
    theta0 = 0.02;                      % The initial sparisty threshold
    alpha0 = 0.9;                       % The initial learning rate
    beta0 = 0.8;                        % The sparsity penalty
    nu = 0.025;                         % update threshold for the constraint neurons during the recall phase
    index_max = 1;                      % This is the maximum number of random scenarios generated for simulation
end
max_itr_recall = 5;                     % This is the maximum number of iterations performed by the recall algorithms of Lee and Jankowski
err_bits_range = [0:10];                % The number of bits that will be corrupted initially for the recall phase
no_of_patterns = [200];
no_simulated_instances = 1000;          % The number of patterns that are going to be denoised during the recall phase
max_noise_amp = 1;                      % Maximum value of integer-valued noise added to each bit
addpath(genpath('../Other_Works'));     % Include the library of common functions in the search path     
%--------------------------------------------------------------------------

%%
%==============================INITIALIZATION==============================
initialization_done_by_compare = 1;     % Tell the other codes that the initialization has been done
plot_flag = 0;                          % Tells other codes that they should not plot anything
%==========================================================================

%%
%============================PROCESS THE RESULTS===========================

%----------------If Not Already Read the Resultsof Our Work----------------
if (~exist('processed_BER_BFS','var'))
    plot_flag = 0
    run read_results
end
%--------------------------------------------------------------------------
    
%---------------------Execute Jankwoski's Algorithm------------------------
cd('./Jankowski_Work')
run Complex_Neur_Jankowski
cd('..')
%--------------------------------------------------------------------------

%------------------------Execute Lee's Algorithm---------------------------
cd('./Lee_Work')
run Complex_Neur_Lee
cd('..')
%--------------------------------------------------------------------------

%==========================================================================

%==============================PLOT THE RESULTS============================
plot(sort(processed_error_bits_BFO),sort(processed_BER_BFO),'LineWidth',2,'Color','k');    
hold on
plot(sort(processed_error_bits_Jankowski_non_random),sort(processed_BER_Jankowski_non_random),'b-.','LineWidth',2);
plot(sort(processed_error_bits_Jankowski_random),sort(processed_BER_Jankowski_random),'b-*','LineWidth',2);
plot(sort(processed_error_bits_Lee_non_random),sort(processed_BER_Lee_non_random),'r-.','LineWidth',2);
plot(sort(processed_error_bits_Lee_random),sort(processed_BER_Lee_random),'r-*','LineWidth',2);
legend('Subspace patterns', 'Random patterns')
    
xlhand = get(gca,'xlabel');            
ylhand = get(gca,'ylabel');            
set(xlhand,'string','e','fontsize',30)            
set(ylhand,'string','Final BER','fontsize',30)
legend('Our work','Jankowski, Subs.', 'Jankowski, Rand.','Lee, Subs.','Lee, Rand.')
%==========================================================================
    

