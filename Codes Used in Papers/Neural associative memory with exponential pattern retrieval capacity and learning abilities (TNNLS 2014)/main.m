%==========================================================================
%********************************READ ME***********************************
%==========================================================================

%--------------------------------Summary-----------------------------------
% This piece of code initializes the necessary parameters for the constraint
% enforcing neural network and stores them on appropriate files so that
% other functions can have access to them. The advantage of storing them on
% hard disk is that we can run a parallel version of the code which makes
% it much more faster.
%--------------------------------------------------------------------------

%==========================================================================
%==========================================================================

%%
%=============================INITIALIZATION===============================

%---------------------------Network Parameters-----------------------------
N = 160;                                % N is the number of neurons in network.
K = 80;                                 % K is the number of message bits.
N_const = N-K;                          % N_cost represents the number of constraints.        
deg_column_G = 10;                      % Number of non-zero elements in each column of the "generator" matrix to construct synthetic patterns
deg_row_G = N*deg_column_G/K;           % Number of non-zero elements in each row of the "generator" matrix to construct synthetic patterns

Q = 8;                                  % Number of quantization levels
const_to_learn = 150;                   % Number of contraints to learn over the patterns
random_dataset_flag = 1;                % If 1, this flag tells the code to use the dataset generated by the file "neural_initialization.m". If 0, it will read the dataset from the file specified by the user
index_in = 1;                           % Index of the random graph in the considered ensemble (for random_dataset_flag =1)
mkdir(['./Learn_Results'],['N_',num2str(N),'_K_',num2str(K)]);        % Create a specific folder for the current N and K
index_max = 50;                                     % This is the maximum number of random scenarios generated for simulation
pattern_learn_number = min(100000,2^K);             % This is the number of patterns used in the learning process.
random_dataset_flag = 1;                % If 1, this flag tells the code to use the dataset generated by the file "neural_initialization.m". If 0, it will read the dataset from the file specified by the user
initialization_done = 1;                % Tells the other codes that the initialization has been done before
%--------------------------------------------------------------------------
    
%---------------------Learning Algorithm Parameters------------------------
max_y_thr = .001;
theta0 = 0.02;                      % The initial sparisty threshold
alpha0 = 0.9;                       % The initial learning rate
learn_itr_max = 500;                % The maximum number of performed learning iterations
beta0 = 0.8;                        % The sparsity penalty
learn_itr_max = 10000;                              % This is the number of times that the learning phase is repeated for the patterns in the training set       
%--------------------------------------------------------------------------

%----------------------Recall Algorithm Parameters-------------------------
no_simulated_instances = 1000;      % The number of patterns that are going to be denoised during the recall phase
max_noise_amp = 1;                  % Maximum value of integer-valued noise added to each bit
err_bits_range = [0:10];            % The number of bits that will be corrupted initially for the recall phase
gamma_BFO = 0.95;                   % The update threshold for the Original Bit flipping algorithm
gamma_BFS = 0.95;                   % The update threshold for the Simplified Bit flipping algorithm
theta0 = 0.02;                      % The initial sparisty threshold
alpha0 = 0.9;                       % The initial learning rate
beta0 = 0.8;                        % The sparsity penalty
nu = 0.025;                         % update threshold for the constraint neurons during the recall phase
%--------------------------------------------------------------------------

%----------------------------Neural Parameters-----------------------------
z_max = 1;                              % This is the maximum value of message bits.
z_min = 0;                              % This is the minimum value of message bits.                             
%--------------------------------------------------------------------------

%----------------------------Other Initializations-------------------------
mkdir(['./Initialization_Files'],['N_',num2str(N),'_K_',num2str(K)]);   % Create a specific folder for the current N and K
addpath(genpath('./Common_Library'));
addpath(genpath('./Our_Works'));                                   % Include the library of common functions in the search path% Include the library of common functions in the search path
%--------------------------------------------------------------------------

%==========================================================================

%%
%==========================RUN INITIALIZATION==============================

%------------------Check If LEarning Has Been Done Before------------------
initialize_flag = 1;
if (random_dataset_flag)
    for index = 1:index_max
        fid = fopen(['./Initialization_Files/N_',num2str(N),'_K_',num2str(K),'/neural_journal_train_set_N_',num2str(N),'_K_',num2str(K),'_index_',num2str(index),'.mat'], 'r');
        if (fid < 0)
            initialize_flag = 0;
            break
        end
    end
end
%--------------------------------------------------------------------------

%---------------Run the Initialization Process If Necessary----------------
if (initialize_flag == 0)
    display('---------------------------------------------------------');
    display('Executing the initialization phase!');
    display('---------------------------------------------------------');
    
    run neural_initialization
end
%--------------------------------------------------------------------------

%==========================================================================


%%
%======================RUN THE LEARNING ALGORITHM==========================

%------------------Check If LEarning Has Been Done Before------------------
learn_flag = 0;
fid = fopen(['./Learn_Results/N_',num2str(N),'_K_',num2str(K),'/W_alpha_',num2str(alpha0),'_theta_',num2str(theta0),'_index_',num2str(index_in),'.txt'], 'r');
if (fid > 0)
   W = fscanf(fid, '%f',[N,const_to_learn]);
    W = W';
    fclose(fid);
    [m1,~] = size(W);
    if (m1 > const_to_learn*0.8)
        learn_flag = 1;
    end
end
%--------------------------------------------------------------------------

%-------------------Run the Learning Process If Necessary------------------
if (learn_flag == 0)
    display('---------------------------------------------------------');
    display('Executing the learning phase!');
    display('---------------------------------------------------------');
    
    run neural_learn
end
%--------------------------------------------------------------------------

%==========================================================================

%%
%===========================READ THE RESULTS===============================    
run read_results
%==========================================================================

%%
%==========================COMPARE TO OTHER WORK===========================
run compare_results
%==========================================================================


