%==========================================================================
%***********************CODE: dynamic_behavior2****************************
%==========================================================================

%--------------------------------INPUTS------------------------------------
% None
%--------------------------------------------------------------------------

%--------------------------------OUTPUTS-----------------------------------
% Node
%--------------------------------------------------------------------------


%--------------------------FUNCTION DESCRIPTION----------------------------
% This piece of code tracks the evolution of the probability of error in a 
% single-cluster neural network with non-binary noise. It either generates 
% random degree distributions and track the evolution over an ensemble of
% such distributions or read the degree distribution of a learned neural 
% graph from a file and do the same.

% The function starts by finding the theoretical threshold beyond which the
% error probability is supposed to reahc 1. Then, it starts simulation by
% setting the initial noise probability once below and once beyond the
% threshold. In each case, the code tracks the probability of each node
% have a noise value from 1 to a maximum S. If in the end of simulation all
% these probabilities converged to zero, a success is declared. The code
% counts the number of success over the trials and we expect to see a
% success rate of 1 in the sub-threshold domain and a success rate of zero
% in the case where we started simulation beyond decoding threshold. 
% The code also generates two sample figures of the simulated degree
% distributions as well as the evolution of the probability of error over
% the course of simulation for sub/super-threshold domains. 
%--------------------------------------------------------------------------

%==========================================================================
%==========================================================================

warning off

%=============================INITIALIZATION===============================
n = 100;                                    % The number of pattern (left) nodes in the considered graph.
m = 50;                                     % The number of constraint (right) nodes in the considered graph.
S = 20;                                     % S is themaximum noise amplitude.

ensemble_option = 1;                        % If 1, the code generates random ensembles. If 0, it reads the distributions from the file. 
ensemble_flag = 'p';                        % 'p' for Poisson, 'g' for Gaussian and 'r' for regular degree distributions

switch ensemble_flag
    case 'p'
        lambda_r = 10;                      % lambda_r is the parameter for the row degree distribtuions.
        lambda_c = lambda_r*m/n;            % lambda_c is the parameter for the column degree distribtuions.        
    case 'g'
        mu_r = 10;                          % mu_r is the average row degree.
        mu_c = mu_r*m/n;                    % mu_c is the average column degree.
        sigma_r = 15;                       % (sigma_r)^2 is the variance of the row degrees.
        sigma_c = 15;                       % (sigma_c)^2 is the variance of the column degrees.       
    case 'r'
        d_r = 10;                           % d_r is the degree of constraint nodes.
        d_c = d_r*m/n;                      % d_c is the degree of pattern nodes.
        
        %----------------Check the validity of the input-------------------
        if (d_c - round(d_c) ~=0)
            error('Invalid input parameters');
        end
        %------------------------------------------------------------------
    otherwise
        error('Unknown distributions');
end

x_thr_ave = 0;                              % The average of the threshold over the ensemble of degree distributions.
itr_max = 100;                              % The maximum number of iterations to track the evolution of the probability of error
success_count_bef = 0;                      % The number of successful trials in the sub-threshold domain
success_count_aft = 0;                      % The number of successful trials in the super-threshold domain

ensemble_size= 50;                          % the number of different learned neural networks or the number of random ensembles generated by the algorithm in case ensemble_option = 1

if (ensemble_option == 0)                   % In case of learned graphs, specify the learning parameters to read the graph from the file
    alpha0 = .75;                           % the learning step in the learning algorithm
    beta0 = 0.45;                           % the sparsity penalty coefficient in the learning algorithm
    theta0 = 0.2;                           % the sparsity threshold in the learning algorithm    
end
%--------------------------------------------------------------------------


%-----------Read Degree Distribution in Case of Learned Ensembles----------
if (ensemble_option == 0)
    [deg_row,deg_column,lambda,rho] = deg_dribution(n,n-m,alpha0,beta0,theta0,ensemble_size);           % Read degree distributions from the files
    ensemble_size = 1;                                                                                  % Reset ensemble size for simulations as averaging is already done in the function above
end
%==========================================================================

%==============CALCULATE THRESHOLD & ANALYZE DYNAMIC BEHAVIOR==============
for iii = 1:ensemble_size

    %------Genrate the Deree Distribution in Case of Random Ensemble-------
    if (ensemble_option == 1)
        deg_column = [1:m];                         % Initialize column degrees
        deg_row = [1:n];                            % Initialize row degrees
               
        switch ensemble_flag
            case 'p'
                [lambda,deg_column] = hist(poissrnd(lambda_c,n,1),deg_column);    
                [rho,deg_row] = hist(poissrnd(lambda_r,m,1),deg_row);                
            case 'g'
                [lambda,deg_column] = hist(mu_c+sigma_c*randn(n,1),deg_column);        
                [rho,deg_row] = hist(mu_r+sigma_r*randn(m,1),deg_row);               
            case 'r'
                lambda = zeros(1,m);
                rho = zeros(1,n);
                lambda(d_c) = 1;                    
                rho(d_r) = 1;
        end
        
        lambda = lambda/sum(lambda);                % Normalize column degree distribution
        rho = rho/sum(rho);                         % Normalize row degree distribution
    end
    %----------------------------------------------------------------------
    
    %-----------------Calculate the Theoretical Threshold------------------
    x_thr = theoretical_threshold(n,m,lambda,deg_column,rho,deg_row);       % Note that x_thr = 1-z_thr is 1 minus the probability of initial error.
    x_thr_ave = x_thr_ave+x_thr;
    %----------------------------------------------------------------------
    
    if (x_thr<1)    
        %-------------------Sub-threshold Domain---------------------------
        [success_flag,zz_bef,e] = error_evolution(lambda,deg_column,rho,deg_row,x_thr,S,itr_max);
        success_count_bef = success_count_bef + success_flag;
        %------------------------------------------------------------------
        
        %-------------------Super-threshold Domain-------------------------
        [success_flag,zz_aft,e] = error_evolution(lambda,deg_column,rho,deg_row,x_thr-0.01,S,itr_max);
        success_count_aft = success_count_aft + success_flag;        
        %------------------------------------------------------------------
        
    end
             
end
x_thr_ave = x_thr_ave/iii;
%==========================================================================

%=============================DISPLAY RESULTS==============================

%---------------------Display Row Degree Distribution----------------------
subplot(2,2,1)
bar(deg_row,rho);
xlim([0 n]);
xlabel('Degree','fontsize',30);
ylabel('Row degree distribution','fontsize',30);
set(gca,'FontSize',24);
%--------------------------------------------------------------------------

%--------------------Display Column Degree Distribution--------------------
subplot(2,2,2)
bar(deg_column,lambda);
xlim([0 m]);
xlabel('Degree','fontsize',30);
ylabel('Column degree distribution','fontsize',30);
set(gca,'FontSize',24);
%--------------------------------------------------------------------------

%--------------Display Error Evolution in Sub-threshold Domain-------------
subplot(2,2,3)
plot(zz_bef,'Linewidth',6)
xlim([0 itr_max]);
xlabel('t','fontsize',30);
ylabel('q(t)','fontsize',30);
set(gca,'FontSize',24);
%--------------------------------------------------------------------------

%-------------Display Error Evolution in Super-threshold Domain------------
subplot(2,2,4)
plot(zz_aft,'Linewidth',6)
xlim([0 itr_max]);
xlabel('t','fontsize',30);
ylabel('q(t)','fontsize',30);
set(gca,'FontSize',24);
%--------------------------------------------------------------------------

%==========================================================================

